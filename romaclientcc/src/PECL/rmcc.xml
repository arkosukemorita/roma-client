<?xml version="1.0" ?>
<extension name="phprmcc" version="1.0.0">
 <summary>Roma-client PHP extension</summary>
 <description>
  Roma-client PHP extension
 </description>
 <maintainers>
  <maintainer>
   <user>hirkubota</user>
   <name>hiroaki.kubota</name>
   <email>hiroaki.kubota@mail.rakuten.co.jp</email>
   <role>lead</role>
  </maintainer>
 </maintainers>
 <release>
  <version>0.0.1</version>
  <date>2010-06-15</date>
  <state>alpha</state>
  <notes>
    First version.
  </notes>
 </release>
 <changelog>
 </changelog>
 <license>PHP</license>

 <deps language="cpp" platform="all">
  <with defaults="/usr:/usr/local">
  <header name="string" />
  <header name="map" />
  <header name="fstream" />
  <header name="stdlib.h" />
  <header name="string.h" />
  <header name="rakuten/rmcc/rmcc.h" path="include" />
  <header name="rakuten/exception.h" path="include" />
  <lib name="rmcc" platform="all" />
  </with>
 </deps>

 <globals>
  <global name="client_map" type="void*" />
 </globals>

 <function role="internal" name="MINIT">
  <code>
    <![CDATA[
       typedef std::map<std::string,rakuten::rmcc::RomaClient *> client_map_t;
       static client_map_t client_map;
       PHPRMCC_G(client_map) = (void*)&client_map;
    ]]>
  </code>
 </function>

 <function name="rmc_log">
  <proto>int rmc_log(int lv,int type)</proto>
  <code>
  <![CDATA[
     rakuten::set_loglv(lv);
     if ( type == 0 ) {
       rakuten::set_logfp(stdout);
     } else if ( type == 1 ) {
       rakuten::set_logfp(stderr);
     }
     RETURN_LONG(0);
  ]]>
  </code>
 </function>

 <function name="rmc_init">
  <proto>string rmc_init(array nl,int routing)</proto>
  <code>
  <![CDATA[
//std::ofstream logfs("/tmp/test.txt");
//logfs << "***********" << ::std::endl;
     typedef std::map<std::string,rakuten::rmcc::RomaClient *> client_map_t;
     client_map_t *client_map = (client_map_t*)PHPRMCC_G(client_map);
     std::string client_id;     
     for ( int i = 0 ; i < zend_hash_num_elements(nl_hash) ; i++ ) {
	 zval **pData;
	 zend_hash_index_find(nl_hash,i,(void **)&pData);
	 convert_to_string_ex(pData);
	 char * str = Z_STRVAL_PP(pData);
         client_id = client_id + str;
     }
     client_map_t::iterator it = client_map->find(client_id);
     if ( it == client_map->end() ) {
         rakuten::rmcc::RomaClient * client = new rakuten::rmcc::RomaClient();
         for ( int i = 0 ; i < zend_hash_num_elements(nl_hash) ; i++ ) {
             zval **pData;
             zend_hash_index_find(nl_hash,i,(void **)&pData);
             convert_to_string_ex(pData);
             char * str = Z_STRVAL_PP(pData);
             if ( strchr(str,'_') ) {
                 client->get_nodelist().push_back(str);
             }
         }
         try {
           client->init(routing);
           client_map->insert(client_map_t::value_type(client_id,client));
         }catch(const rakuten::Exception & ex ) {
           // @@@ log...
           RETURN_LONG(rakuten::rmcc::RMC_RET_ERROR);
         }
     }
     RETURN_STRING((char*)client_id.c_str(),1);
  ]]>
  </code>
  <test>
   <code>
     function callback($buffer)
     {
       $fp = fopen("/tmp/test.txt","a+");
       fwrite($fp,$buffer);
       fwrite($fp,"\n");
       fclose($fp);
       return ($buffer);
     }
     ob_start("callback");
     echo "## rmc_init() ##";
     rmc_log(100,0);
     $nl = array();
     $nl[] = "localhost_11211";
     $nl[] = "localhost_11212";
     echo rmc_init($nl,1);
     ob_end_flush();
   </code>
   <result>## rmc_init() ##localhost_11211localhost_11212</result>
  </test>
 </function>

 <function name="rmc_num_connection">
  <proto>int rmc_num_connection(string client_id)</proto>
  <code>
  <![CDATA[
     typedef std::map<std::string,rakuten::rmcc::RomaClient *> client_map_t;
     client_map_t *client_map = (client_map_t*)PHPRMCC_G(client_map);
     client_map_t::iterator it = client_map->find(client_id);
     if ( it != client_map->end() ) {
       RETURN_LONG(it->second->num_valid_connection());
     }
     RETURN_LONG(0);
  ]]>
  </code>
  <test>
   <code>
     function callback($buffer)
     {
       $fp = fopen("/tmp/test.txt","a+");
       fwrite($fp,$buffer);
       fwrite($fp,"\n");
       fclose($fp);
       return ($buffer);
     }
     ob_start("callback");
     echo "## rmc_num_connection() ##";
     rmc_log(100,0);
     $nl = array();
     $nl[] = "localhost_11211";
     $nl[] = "localhost_11212";
     $cid = rmc_init($nl,1);
     echo $cid;
     echo rmc_num_connection($cid);
     $nl = array();
     $nl[] = "localhost_11211";
     $cid = rmc_init($nl,1);
     echo $cid;
     echo rmc_num_connection($cid);
     $nl = array();
     $nl[] = "-d";
     $nl[] = "localhost_11211";
     $cid = rmc_init($nl,0);
     echo $cid;
     echo rmc_num_connection($cid);
     ob_end_flush();
   </code>
   <result>## rmc_num_connection() ##localhost_11211localhost_112122localhost_112112-dlocalhost_112111</result>
  </test>
 </function>

 <function name="rmc_term">
  <proto>int rmc_term(string client_id)</proto>
  <code>
  <![CDATA[
     typedef std::map<std::string,rakuten::rmcc::RomaClient *> client_map_t;
     client_map_t *client_map = (client_map_t*)PHPRMCC_G(client_map);
     client_map_t::iterator it = client_map->find(client_id);
     if ( it != client_map->end() ) {
       it->second->term();
       delete it->second;
       client_map->erase(it);
       RETURN_LONG(rakuten::rmcc::RMC_RET_OK);
     }
     RETURN_LONG(rakuten::rmcc::RMC_RET_ERROR);
  ]]>
  </code>
  <test>
   <code>
     function callback($buffer)
     {
       $fp = fopen("/tmp/test.txt","a+");
       fwrite($fp,$buffer);
       fwrite($fp,"\n");
       fclose($fp);
       return ($buffer);
     }
     ob_start("callback");
     echo "## rmc_term() ##";
     rmc_log(100,0);
     $nl = array();
     $nl[] = "localhost_11211";
     $nl[] = "localhost_11212";
     $cid = rmc_init($nl,1);
     echo $cid;
     echo rmc_term($cid);
     ob_end_flush();
   </code>
   <result>## rmc_term() ##localhost_11211localhost_112120</result>
  </test>
 </function>

 <function name="rmc_set">
  <proto>int rmc_set(string client_id, string key, string value, int exptime)</proto>
  <code>
  <![CDATA[
     typedef std::map<std::string,rakuten::rmcc::RomaClient *> client_map_t;
     client_map_t *client_map = (client_map_t*)PHPRMCC_G(client_map);
     client_map_t::iterator it = client_map->find(client_id);
     if ( it != client_map->end() ) {
       try {
         int i = it->second->cmd_store(key,rakuten::rmcc::RomaValue(value,value_len),exptime);
         RETURN_LONG(
           it->second->cmd_store(key,rakuten::rmcc::RomaValue(value,value_len),exptime);
         );
       }catch(const rakuten::Exception & ex ) {
         // @@@ log...
       }
     }
     RETURN_LONG(rakuten::rmcc::RMC_RET_ERROR);
  ]]>
  </code>
  <test>
   <code>
     function callback($buffer)
     {
       $fp = fopen("/tmp/test.txt","a+");
       fwrite($fp,$buffer);
       fwrite($fp,"\n");
       fclose($fp);
       return ($buffer);
     }
     ob_start("callback");
     echo "## rmc_set() ##";
     rmc_log(100,0);
     $nl = array();
     $nl[] = "localhost_11211";
     $nl[] = "localhost_11212";
     $cid = rmc_init($nl,1);
     echo $cid;
     echo rmc_set($cid,"foobar","FOOBAR",100);
     ob_end_flush();
   </code>
   <result>## rmc_set() ##localhost_11211localhost_112120</result>
  </test>
 </function>
 <function name="rmc_get">
  <proto>array rmc_get(string client_id, string key)</proto>
  <code>
  <![CDATA[
     typedef std::map<std::string,rakuten::rmcc::RomaClient *> client_map_t;
     client_map_t *client_map = (client_map_t*)PHPRMCC_G(client_map);
     client_map_t::iterator it = client_map->find(client_id);
     if ( it != client_map->end() ) {
       try {
         rakuten::rmcc::RomaValue v = it->second->cmd_get(key);
         if ( v.length < 0 ) {
           add_index_stringl(return_value,0,(char*)"",0,1);
         }else {
           add_index_stringl(return_value,0,(char*)v.data,v.length,1);
         }
         add_index_long(return_value,1,v.length);
         add_index_long(return_value,2,v.cas);
       }catch(const rakuten::Exception & ex ) {
            // @@@ log...
         RETURN_LONG(rakuten::rmcc::RMC_RET_ERROR);
       }
     } else {
       RETURN_LONG(rakuten::rmcc::RMC_RET_ERROR);
     }
  ]]>
  </code>
  <test>
   <code>
     function callback($buffer)
     {
       $fp = fopen("/tmp/test.txt","a+");
       fwrite($fp,$buffer);
       fwrite($fp,"\n");
       fclose($fp);
       return ($buffer);
     }
     ob_start("callback");
     echo "## rmc_get() ##";
     rmc_log(100,0);
     $nl = array();
     $nl[] = "localhost_11211";
     $nl[] = "localhost_11212";
     $cid = rmc_init($nl,1);
     echo $cid;
     echo rmc_set($cid,"foobar","FOOBAR",100);
     $ret = rmc_get($cid,"foobar");
     var_dump($ret);
     ob_end_flush();
   </code>
   <result>
  <![CDATA[
## rmc_get() ##localhost_11211localhost_112120array(3) {
  [0]=>
  string(6) "FOOBAR"
  [1]=>
  int(6)
  [2]=>
  int(-1)
}
]]>
  </result>
  </test>
 </function>

 <function name="rmc_alist_sized_insert">
  <proto>int rmc_alist_sized_insert(string client_id, string key,int size,string value)</proto>
  <code>
  <![CDATA[
     typedef std::map<std::string,rakuten::rmcc::RomaClient *> client_map_t;
     client_map_t *client_map = (client_map_t*)PHPRMCC_G(client_map);
     client_map_t::iterator it = client_map->find(client_id);
     if ( it != client_map->end() ) {
       try {
         RETURN_LONG(
           it->second->cmd_alist_sized_insert(key,size,rakuten::rmcc::RomaValue(value,value_len));
         );
       }catch(const rakuten::Exception & ex ) {
         // @@@ log...
       }
     }
     RETURN_LONG(rakuten::rmcc::RMC_RET_ERROR);
  ]]>
  </code>
  <test>
   <code>
     function callback($buffer)
     {
       $fp = fopen("/tmp/test.txt","a+");
       fwrite($fp,$buffer);
       fwrite($fp,"\n");
       fclose($fp);
       return ($buffer);
     }
     ob_start("callback");
     echo "## rmc_alist_sized_insert() ##";
     rmc_log(100,0);
     $nl = array();
     $nl[] = "localhost_11211";
     $nl[] = "localhost_11212";
     $cid = rmc_init($nl,1);
     echo $cid;
     echo rmc_alist_sized_insert($cid,"FOOBAR",2,"FOOBAR");
     echo rmc_alist_sized_insert($cid,"FOOBAR",2,"FOOBAR");
     echo rmc_alist_sized_insert($cid,"FOOBAR",2,"BARFOO");
     ob_end_flush();
   </code>
   <result>## rmc_alist_sized_insert() ##localhost_11211localhost_11212000</result>
  </test>
 </function>
 <function name="rmc_alist_join">
  <proto>array rmc_alist_join(string client_id, string key,string sep)</proto>
  <code>
  <![CDATA[
     typedef std::map<std::string,rakuten::rmcc::RomaClient *> client_map_t;
     client_map_t *client_map = (client_map_t*)PHPRMCC_G(client_map);
     client_map_t::iterator it = client_map->find(client_id);
     if ( it != client_map->end() ) {
       try {
         rakuten::rmcc::RomaValue v = it->second->cmd_alist_join(key,sep);
         if ( v.length < 0 ) {
           add_index_stringl(return_value,0,(char*)"",0,1);
         }else {
           add_index_stringl(return_value,0,(char*)v.data,v.length,1);
         }
         add_index_long(return_value,1,v.length);
         add_index_long(return_value,2,v.cas);
       }catch(const rakuten::Exception & ex ) {
	  // @@@ log...
         RETURN_LONG(rakuten::rmcc::RMC_RET_ERROR);
       }
     }else {
       RETURN_LONG(rakuten::rmcc::RMC_RET_ERROR);
     }

  ]]>
  </code>
  <test>
   <code>
     function callback($buffer)
     {
       $fp = fopen("/tmp/test.txt","a+");
       fwrite($fp,$buffer);
       fwrite($fp,"\n");
       fclose($fp);
       return ($buffer);
     }
     ob_start("callback");
     echo "## rmc_alist_join() ##";
     rmc_log(100,0);
     $nl = array();
     $nl[] = "localhost_11211";
     $nl[] = "localhost_11212";
     $cid = rmc_init($nl,1);
     echo $cid;
     echo rmc_alist_sized_insert($cid,"FOOBAR",2,"FOOBAR");
     echo rmc_alist_sized_insert($cid,"FOOBAR",2,"FOOBAR");
     echo rmc_alist_sized_insert($cid,"FOOBAR",2,"###");
     $ret = rmc_alist_join($cid,"FOOBAR",",");
     var_dump($ret);
     ob_end_flush();
   </code>
   <result>
<![CDATA[
## rmc_alist_join() ##localhost_11211localhost_11212000array(3) {
  [0]=>
  string(10) "###,FOOBAR"
  [1]=>
  int(10)
  [2]=>
  int(-1)
}
]]>
  </result>
  </test>
 </function>
</extension>

